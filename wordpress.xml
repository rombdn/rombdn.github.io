<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2013-05-20 20:50"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>rombdn</title>
<link>http://rombdn.wordpress.com</link>
<description/>
<pubDate>Mon, 20 May 2013 20:50:14 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://rombdn.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>rombdn</wp:author_login>
  <wp:author_email>rbeaudon@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[rombdn]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:term>
  <wp:term_id>18171681</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>main</wp:term_slug>
  <wp:term_name><![CDATA[Main]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>rombdnrombdn</title>
		<link>http://rombdn.wordpress.com</link>
	</image>
	<item>
  <title>HTML5 Canvas / Javascript / Box2D : a little game</title>
  <link>http://rombdn.wordpress.com/2012/12/17/little-game-with-html5-canvas-and-box2d/</link>
  <pubDate>Mon, 17 Dec 2012 15:15:25 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://bal2o.wordpress.com/?p=3</guid>
  <description/>
  <content:encoded><![CDATA[Here is a little game I made (for a some friends) while playing around with HTML5 canvas and <a href="http://box2d.org/" target="_blank">Box2D</a> :

<strong><a title="doggy sledding" href="http://www.wajrak.com/" target="_blank">Dog Sled</a></strong> (<a href="https://github.com/rombdn/dogsled">github</a>)

I have planned to refactor the code because it is dirty, not robust and not maintenable (hacked it while learning box2d).

I think some parts could help as real situation exemples of how to use box2d in javascript and how to add graphics in front of box2d... or as a good compilation of bad practices (hehe). All the game code and logic is in index.html ;)

Some explanations :

<em>Initialisations</em>

[sourcecode language="javascript"]
//...
dog_initcanvas();
dog_initsound();
dog_events(); //mouse and keyboard
dog_initworld();
dog_setupcollisions();
dog_initdraw();
dog_update();
//...
[/sourcecode]

<em>Collisions</em>

[sourcecode language="javascript"]
//...
function dog_setupcollisions()
{
   var listener = new Box2D.Dynamics.b2ContactListener;
   listener.BeginContact = function(contact) {
      //if the dog touch the line we add a flag
      //...
   listener.PreSolve = function(contact) {
      //if the dog eats a bone there's no collision
      //...
   listener.PostSolve = function(contact, impulse) {
      //if the dog touch his house
      //and sounds...
      //...
[/sourcecode]

<em>Main loop</em>

[sourcecode language="javascript"]
//...
function dog_update()
{
	window.requestAnimationFrame(dog_update);

	world.Step(
		1 / 60,	//frame-rate
		10,		//velocity iterations
		10		//position iterations
	);

	world.ClearForces();
	canvas_draw(); //graphics
}
//...
function canvas_draw()
//...
//we iterate through all the bodies
for(body = world.GetBodyList(); body; body = body.GetNext()) {
   //...
   //we use the User Data field to know what to draw
	switch(body.GetUserData()) {
		case &quot;line&quot;:
//...
[/sourcecode]

<em>More to come...</em>

I used <a href="http://code.google.com/p/box2dweb/">box2dweb</a>, a javascript port of box2d 2.1. It lacks features like rope joint but I realized it too late... There are more up to date ports i didn't try like these ones : <a href="http://code.google.com/p/box2d-html5/">box2d-html5</a> or <a href="https://github.com/kripken/box2d.js">kripken's box2djs</a>

Have fun!

<em>
I followed these tutorials <a href="http://blog.sethladd.com/search/label/box2d">blog.sethladd.com</a></em>
<em>I do not own most of the graphics</em>


<p style="text-align:right;"><a href="https://plus.google.com/112678424699484797019" rel="author">Romain</a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2012-12-17 15:15:25</wp:post_date>
  <wp:post_date_gmt>2012-12-17 15:15:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>little-game-with-html5-canvas-and-box2d</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="box2d"><![CDATA[box2d]]></category>
  <category domain="post_tag" nicename="canvas"><![CDATA[canvas]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="dog"><![CDATA[dog]]></category>
  <category domain="post_tag" nicename="html5"><![CDATA[html5]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="sled"><![CDATA[sled]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[9835614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jabber_published</wp:meta_key>
    <wp:meta_value><![CDATA[1355757334]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[3]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Selenium Webdriver 2 with Python : a simple example</title>
  <link>http://rombdn.wordpress.com/2012/12/17/selenium-webdriver-2-with-python-a-simple-example/</link>
  <pubDate>Mon, 17 Dec 2012 16:10:32 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://bal2o.wordpress.com/?p=13</guid>
  <description/>
  <content:encoded><![CDATA[[sourcecode language="python"]
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
import time, re

#browser init
browser = webdriver.Firefox()

#wait template : 3 seconds
wait = WebDriverWait(browser, 3)

#goto google
browser.get(&quot;http://www.google.com&quot;)

#verify title using python internal assert
assert &quot;Google&quot; in browser.title

#type cheese in the search area then submit
elem = browser.find_element_by_name(&quot;q&quot;)
elem.send_keys(&quot;cheese&quot;)
elem.submit()

#wait until we get the search results
#see http://seleniumhq.org/docs/04_webdriver_advanced.html for details
wait.until(lambda d : d.title.lower().startswith(&quot;cheese&quot;))

assert &quot;cheese&quot; in browser.title

#goto to translate tools
browser.find_element_by_link_text(&quot;Plus&quot;).click()

#wait until the menu is displayed (french)
#ExpectedConditions.elementsToBeClickable is not available in python
#instead we can use is_displayed()
#see http://selenium-python.readthedocs.org/en/latest/api.html
wait.until(lambda d : d.find_element_by_link_text(&quot;Traduction&quot;).is_displayed())

#translate from english to french
browser.find_element_by_link_text(&quot;Traduction&quot;).click()
assert &quot;fromage&quot; in browser.find_element_by_id(&quot;result_box&quot;).text
[/sourcecode]


<p style="text-align:right;"><a href="https://plus.google.com/112678424699484797019" rel="author">Romain</a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2012-12-17 16:10:32</wp:post_date>
  <wp:post_date_gmt>2012-12-17 16:10:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>selenium-webdriver-2-with-python-a-simple-example</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="qa"><![CDATA[qa]]></category>
  <category domain="post_tag" nicename="quality"><![CDATA[quality]]></category>
  <category domain="post_tag" nicename="selenium"><![CDATA[selenium]]></category>
  <category domain="category" nicename="test"><![CDATA[Test]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="post_tag" nicename="webdriver"><![CDATA[webdriver]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jabber_published</wp:meta_key>
    <wp:meta_value><![CDATA[1355760633]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[9835614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[13]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[barilla lasagna coupons]]></wp:comment_author>
    <wp:comment_author_email>norrisgomez@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://rioradar.com/groups/understand-how-to-locate-and-use-barilla-pasta-printable-coupons/</wp:comment_author_url>
    <wp:comment_author_IP>66.248.193.155</wp:comment_author_IP>
    <wp:comment_date>2013-05-16 01:24:49</wp:comment_date>
    <wp:comment_date_gmt>2013-05-16 01:24:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[An outstanding share! I've just forwarded this onto a co-worker who has been doing a little research on this. And he actually ordered me breakfast due to the fact that I discovered it for him... lol. So allow me to reword this.... Thank YOU for the meal!! But yeah, thanks for spending some time to discuss this matter here on your web site.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1368667489.6102631092071533203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>JMeter HTTP tips and examples</title>
  <link>http://rombdn.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/</link>
  <pubDate>Mon, 17 Dec 2012 17:09:37 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://bal2o.wordpress.com/?p=27</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Load all resources attached to a html file</strong>
<a href="http://bal2o.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/http-request/" rel="attachment wp-att-28"><img class="alignnone size-medium wp-image-28" alt="http-request" src="http://rombdn.files.wordpress.com/2012/12/http-request.png?w=300" width="300" height="222" /></a>
Useful when working with frames to avoid one http request per frame (I use this a lot when scripting for PeopleSoft ERP).

<strong>Extract value to variable with regular expressions</strong>
<a href="http://bal2o.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/regex/" rel="attachment wp-att-32"><img class="alignnone size-medium wp-image-32" alt="regex" src="http://rombdn.files.wordpress.com/2012/12/regex1.png?w=300" width="300" height="138" /></a>
You can use a Debug Listener to adjust the regexp.
In this example (PeopleSoft) I checked "Main sample and sub-samples" because the value to be extracted is in a frame.

<strong>Testing a variable</strong>
<a href="http://bal2o.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/if-test/" rel="attachment wp-att-33"><img class="alignnone size-medium wp-image-33" alt="if-test" src="http://rombdn.files.wordpress.com/2012/12/if-test.png?w=300" width="300" height="69" /></a>
In this example I verify that the Regular Expression hereabove worked.

<strong>Javascript in parameters (e.g. to randomize a choice)</strong>
First we get the number of values :
<a href="http://bal2o.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/random-1/" rel="attachment wp-att-36"><img class="alignnone size-medium wp-image-36" alt="random-1" src="http://rombdn.files.wordpress.com/2012/12/random-1.png?w=300" width="300" height="92" /></a>
Then we replace the parameter with our javascript.

[sourcecode language="javascript"]
Math.floor( Math.random() * ${VALUES_COUNT} ) )
[/sourcecode]

In JMeter it becomes

[sourcecode language="javascript"]
${__javaScript( Math.floor( Math.random() * ${NB_Lignes } ) ) }
[/sourcecode]

<a href="http://bal2o.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/random-2/" rel="attachment wp-att-37"><img class="alignnone size-medium wp-image-37" alt="random-2" src="http://rombdn.files.wordpress.com/2012/12/random-2.png?w=300" width="300" height="99" /></a>
Note : The double $$ is due to the variable name in PeopleSoft (AF_PCC_WRK_SELECT_PB$1, AF_PCC_WRK_SELECT_PB$2...)


<p style="text-align:right;"><a href="https://plus.google.com/112678424699484797019" rel="author">Romain</a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2012-12-17 17:09:37</wp:post_date>
  <wp:post_date_gmt>2012-12-17 17:09:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jmeter-http-tips-and-examples</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="jmeter"><![CDATA[jmeter]]></category>
  <category domain="post_tag" nicename="load"><![CDATA[load]]></category>
  <category domain="post_tag" nicename="peoplesoft"><![CDATA[peoplesoft]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="category" nicename="performance-2"><![CDATA[Performance]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[9835614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jabber_published</wp:meta_key>
    <wp:meta_value><![CDATA[1355764179]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>http-request</title>
  <link>http://rombdn.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/http-request/</link>
  <pubDate>Mon, 17 Dec 2012 16:34:01 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2012/12/http-request.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2012-12-17 16:34:01</wp:post_date>
  <wp:post_date_gmt>2012-12-17 16:34:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>http-request</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>27</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2012/12/http-request.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[28]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>regex</title>
  <link>http://rombdn.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/regex/</link>
  <pubDate>Mon, 17 Dec 2012 16:46:07 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2012/12/regex1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2012-12-17 16:46:07</wp:post_date>
  <wp:post_date_gmt>2012-12-17 16:46:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>regex</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>27</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2012/12/regex1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[32]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>if-test</title>
  <link>http://rombdn.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/if-test/</link>
  <pubDate>Mon, 17 Dec 2012 16:53:55 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2012/12/if-test.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2012-12-17 16:53:55</wp:post_date>
  <wp:post_date_gmt>2012-12-17 16:53:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>if-test</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>27</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2012/12/if-test.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[33]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>random-1</title>
  <link>http://rombdn.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/random-1/</link>
  <pubDate>Mon, 17 Dec 2012 17:03:11 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2012/12/random-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2012-12-17 17:03:11</wp:post_date>
  <wp:post_date_gmt>2012-12-17 17:03:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>random-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>27</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2012/12/random-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[36]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>random-2</title>
  <link>http://rombdn.wordpress.com/2012/12/17/jmeter-http-tips-and-examples/random-2/</link>
  <pubDate>Mon, 17 Dec 2012 17:08:11 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2012/12/random-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2012-12-17 17:08:11</wp:post_date>
  <wp:post_date_gmt>2012-12-17 17:08:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>random-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>27</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2012/12/random-2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[27]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[37]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Performance bottlenecks : differences between web and enterprise applications</title>
  <link>http://rombdn.wordpress.com/?p=52</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://bal2o.wordpress.com/?p=52</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2013-02-03 22:22:47</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[52]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[52]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Performance analysis : Impact of resource saturation on response time illustrated</title>
  <link>http://rombdn.wordpress.com/2013/03/28/performance-analysis-utilization-vs-saturation/</link>
  <pubDate>Thu, 28 Mar 2013 22:16:25 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.wordpress.com/?p=55</guid>
  <description/>
  <content:encoded><![CDATA[When investigating performance problems, checking saturation is usually a good start : by definition, any saturation is a bottleneck because it means queueing.

While in batch processing saturation is not a always a problem (e.g when queueing jobs), this is usually not the case for a end user / online transaction where any saturation will probably impact response time. In practice this is usually a very bad situation because it means that the number of requests from clients is greater than the system processing capacity, which can rapidly leads to timeouts for clients...

Saturation may appear at different levels :
<ul>
	<li><span style="line-height:13px;">Physical : CPU (Runqueue), I/O (response time, queue), Memory (swapping). You can find a pretty exhaustive list here : <a title="USE Method : Linux Performance Checklist" href="http://dtrace.org/blogs/brendan/2012/03/07/the-use-method-linux-performance-checklist/" target="_blank">The USE Method: Linux Performance Checklist</a>
</span></li>
	<li>Software : Application servers message queue length</li>
</ul>
Now let's compare utilization and saturation in a very general case of online transactions. I made these graphs - of a very general situation I admit - to illustrate theses points. The system is supposed to be single core. (Note : I represented runqueue = 2 as the normal situation : one thread can run on CPU and the other can wait for memory or I/O, the rule of thumb is Runqueue should be &lt;= available cores).

Transaction response time :
<a href="http://rombdn.files.wordpress.com/2013/03/resptime1.png"><img alt="RespTime" src="http://rombdn.files.wordpress.com/2013/03/resptime1.png?w=300" width="300" height="143" /></a>

CPU Utilization :
<a href="http://rombdn.files.wordpress.com/2013/03/cpupercent.png"><img class="alignnone size-medium wp-image-57" alt="CPUpercent" src="http://rombdn.files.wordpress.com/2013/03/cpupercent.png?w=300" width="300" height="142" /></a>

RunQueue :
<a href="http://rombdn.files.wordpress.com/2013/03/cpurunqueue2.png"><img class="alignnone size-medium wp-image-61" alt="CPUrunqueue" src="http://rombdn.files.wordpress.com/2013/03/cpurunqueue2.png?w=300" width="300" height="141" /></a>

Okay it's not very realistic but it can help to illustrate some empirical observations :
<ul>
	<li>Transaction response time is not (strongly) correlated with physical resources utilization, contrary to saturation (runqueue).</li>
	<li>The system can generally handle some saturation ( 3 &lt; runqueue &lt; 5) but after a certain threshold response time will rapidly degrade.</li>
</ul>
Good analysis!
<p style="text-align:right;"><a href="https://plus.google.com/112678424699484797019" rel="author">Romain</a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2013-03-28 22:16:25</wp:post_date>
  <wp:post_date_gmt>2013-03-28 22:16:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>performance-analysis-utilization-vs-saturation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="analysis"><![CDATA[analysis]]></category>
  <category domain="post_tag" nicename="cpu"><![CDATA[cpu]]></category>
  <category domain="post_tag" nicename="engineering"><![CDATA[engineering]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="category" nicename="performance-2"><![CDATA[Performance]]></category>
  <category domain="post_tag" nicename="resource"><![CDATA[resource]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[9835614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jabber_published</wp:meta_key>
    <wp:meta_value><![CDATA[1364508986]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>CPUpercent</title>
  <link>http://rombdn.wordpress.com/2013/03/28/performance-analysis-utilization-vs-saturation/cpupercent/</link>
  <pubDate>Thu, 28 Mar 2013 21:58:50 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2013/03/cpupercent.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2013-03-28 21:58:50</wp:post_date>
  <wp:post_date_gmt>2013-03-28 21:58:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cpupercent</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2013/03/cpupercent.png</wp:attachment_url>
</item>
<item>
  <title>CPUrunqueue</title>
  <link>http://rombdn.wordpress.com/2013/03/28/performance-analysis-utilization-vs-saturation/cpurunqueue/</link>
  <pubDate>Thu, 28 Mar 2013 22:00:49 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2013/03/cpurunqueue2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2013-03-28 22:00:49</wp:post_date>
  <wp:post_date_gmt>2013-03-28 22:00:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cpurunqueue</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2013/03/cpurunqueue2.png</wp:attachment_url>
</item>
<item>
  <title>RespTime</title>
  <link>http://rombdn.wordpress.com/2013/03/28/performance-analysis-utilization-vs-saturation/resptime/</link>
  <pubDate>Thu, 28 Mar 2013 22:00:51 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.files.wordpress.com/2013/03/resptime1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>62</wp:post_id>
  <wp:post_date>2013-03-28 22:00:51</wp:post_date>
  <wp:post_date_gmt>2013-03-28 22:00:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>resptime</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://rombdn.files.wordpress.com/2013/03/resptime1.png</wp:attachment_url>
</item>
<item>
  <title>Aside</title>
  <link>http://rombdn.wordpress.com/?p=90</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>rombdn</dc:creator>
  <guid isPermaLink="false">http://rombdn.wordpress.com/?p=90</guid>
  <description/>
  <content:encoded><![CDATA[[sourcecode language="javascript"]
&lt;html&gt;
&lt;body&gt;
	&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
	&lt;script src=&quot;underscore.js&quot;&gt;&lt;/script&gt;
	&lt;script src=&quot;backbone.js&quot;&gt;&lt;/script&gt;
	&lt;script src=&quot;zombieViews.js&quot;&gt;&lt;/script&gt;

	&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;

	&lt;script&gt;

		var ZombieView = Backbone.View.extend({
		    initialize: function() {
		        Backbone.on('dummyEvent', this.sayFoo);
		    },

		    sayFoo: function() {
		    	console.log('foo');
		    }
		});

		var view;

	    for(var i = 0; i&lt;1000; ++i) {
        	view = new ZombieView();
        	view.remove();
    	}

    	Backbone.trigger('dummyEvent');

    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>90</wp:post_id>
  <wp:post_date>2013-05-06 15:20:11</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[9835614]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
